#!/bin/bash

clear

# Colors (MUST come before set -u)
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
MAGENTA="\033[35m"
RESET="\033[0m"

set -euo pipefail

# --- CONFIGURABLE VARIABLES ---
WEBUSER="www-data"  # <--- Set to your web server user (e.g. www-data, apache, www-root)
BASE_DIR="/var/www/html/cacti"
PLUGIN_DIR="${BASE_DIR}/plugins"
DB_BACKUP_DIR="./"   # <--- Change as you prefer
# --- 


FAILED_PLUGINS=()

get_remote_hash() {
    local repo="$1"
    sudo -u "$WEBUSER" git -C "$repo" fetch --quiet
    REMOTE_TRACK=$(sudo -u "$WEBUSER" git -C "$repo" rev-parse --abbrev-ref --symbolic-full-name "@{u}" 2>/dev/null)
    if [ -n "$REMOTE_TRACK" ]; then
        sudo -u "$WEBUSER" git -C "$repo" log -1 --pretty=format:"%h" "$REMOTE_TRACK" 2>/dev/null | tr -d '[:space:]'
    else
        echo "N/A"
    fi
}

view_plugins_and_branches() {
    local interactive="${1:-true}"

    header_name="Name"
    header_branch="Current Branch"
    header_remote="Remote Hash"
    header_hash="Current Hash"
    header_desc="Current Desc"
    header_status="Status"

    name_w=${#header_name}
    branch_w=${#header_branch}
    remote_w=${#header_remote}
    hash_w=${#header_hash}
    desc_w=${#header_desc}
    status_w=${#header_status}

    declare -A plugin_remote_hash
    declare -A plugin_local_hash
    declare -A plugin_status
    declare -A plugin_commit_desc

    # --- Cacti core info ---
    CACTI_NAME="cacti"
    CACTI_BRANCH=$(sudo -u "$WEBUSER" git -C "$BASE_DIR" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
    CACTI_REMOTE_HASH=$(get_remote_hash "$BASE_DIR")
    [ -z "$CACTI_REMOTE_HASH" ] && CACTI_REMOTE_HASH="N/A"
    CACTI_LOCAL_HASH=$(sudo -u "$WEBUSER" git -C "$BASE_DIR" rev-parse --short HEAD 2>/dev/null | tr -d '[:space:]')
    [ -z "$CACTI_LOCAL_HASH" ] && CACTI_LOCAL_HASH="N/A"
    CACTI_LOCAL_DESC=$(sudo -u "$WEBUSER" git -C "$BASE_DIR" log -1 --pretty=format:"%s" 2>/dev/null)
    [ -z "$CACTI_LOCAL_DESC" ] && CACTI_LOCAL_DESC="N/A"

    if [[ "$CACTI_LOCAL_HASH" != "N/A" && "$CACTI_REMOTE_HASH" != "N/A" ]]; then
        if [[ "$CACTI_LOCAL_HASH" == "$CACTI_REMOTE_HASH" ]]; then
            CACTI_STATUS="${GREEN}Hashes Match${RESET}"
        else
            CACTI_STATUS="${RED}hash mismatch${RESET}"
        fi
    else
        CACTI_STATUS="${YELLOW}n/a${RESET}"
    fi

    [ ${#CACTI_NAME} -gt $name_w ] && name_w=${#CACTI_NAME}
    [ ${#CACTI_BRANCH} -gt $branch_w ] && branch_w=${#CACTI_BRANCH}
    [ ${#CACTI_REMOTE_HASH} -gt $remote_w ] && remote_w=${#CACTI_REMOTE_HASH}
    [ ${#CACTI_LOCAL_HASH} -gt $hash_w ] && hash_w=${#CACTI_LOCAL_HASH}
    [ ${#CACTI_LOCAL_DESC} -gt $desc_w ] && desc_w=${#CACTI_LOCAL_DESC}
    STATUS_STRIPPED=$(echo -e "$CACTI_STATUS" | sed -r 's/\x1B\[[0-9;]*[mK]//g')
    [ ${#STATUS_STRIPPED} -gt $status_w ] && status_w=${#STATUS_STRIPPED}

    PLUGIN_LIST=()
    for PLUGIN in "$PLUGIN_DIR"/*/; do
        [ -d "$PLUGIN" ] || continue
        PLUGIN_NAME=$(basename "$PLUGIN")
        [ ${#PLUGIN_NAME} -gt $name_w ] && name_w=${#PLUGIN_NAME}
        if [ -d "${PLUGIN}/.git" ]; then
            BRANCH=$(sudo -u "$WEBUSER" git -C "$PLUGIN" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
            REMOTE_HASH=$(get_remote_hash "$PLUGIN")
            [ -z "$REMOTE_HASH" ] && REMOTE_HASH="N/A"
            LOCAL_HASH=$(sudo -u "$WEBUSER" git -C "$PLUGIN" rev-parse --short HEAD 2>/dev/null | tr -d '[:space:]')
            [ -z "$LOCAL_HASH" ] && LOCAL_HASH="N/A"
            LOCAL_DESC=$(sudo -u "$WEBUSER" git -C "$PLUGIN" log -1 --pretty=format:"%s" 2>/dev/null)
            [ -z "$LOCAL_DESC" ] && LOCAL_DESC="N/A"
            if [[ "$LOCAL_HASH" != "N/A" && "$REMOTE_HASH" != "N/A" ]]; then
                if [[ "$LOCAL_HASH" == "$REMOTE_HASH" ]]; then
                    STATUS="${GREEN}Hashes Match${RESET}"
                else
                    STATUS="${RED}hash mismatch${RESET}"
                fi
            else
                STATUS="${YELLOW}n/a${RESET}"
            fi
            [ ${#BRANCH} -gt $branch_w ] && branch_w=${#BRANCH}
            [ ${#REMOTE_HASH} -gt $remote_w ] && remote_w=${#REMOTE_HASH}
            [ ${#LOCAL_HASH} -gt $hash_w ] && hash_w=${#LOCAL_HASH}
            [ ${#LOCAL_DESC} -gt $desc_w ] && desc_w=${#LOCAL_DESC}
            STATUS_STRIPPED=$(echo -e "$STATUS" | sed -r 's/\x1B\[[0-9;]*[mK]//g')
            [ ${#STATUS_STRIPPED} -gt $status_w ] && status_w=${#STATUS_STRIPPED}
            plugin_remote_hash["$PLUGIN"]="$REMOTE_HASH"
            plugin_local_hash["$PLUGIN"]="$LOCAL_HASH"
            plugin_commit_desc["$PLUGIN"]="$LOCAL_DESC"
            plugin_status["$PLUGIN"]="$STATUS"
            PLUGIN_LIST+=("$PLUGIN")
        fi
    done

    num_w=4
    ((name_w+=2))
    ((branch_w+=2))
    ((remote_w+=2))
    ((hash_w+=2))
    ((desc_w+=2))
    ((status_w+=2))
    total_len=$((num_w + name_w + branch_w + remote_w + hash_w + desc_w + status_w + 20))

    # Header
    printf " %-${num_w}s %-${name_w}s| %-${branch_w}s| %-${remote_w}s| %-${hash_w}s| %-${desc_w}s| %-${status_w}s\n" \
        "" "$header_name" "$header_branch" "$header_remote" "$header_hash" "$header_desc" "$header_status"
    printf "%s\n" "$(printf -- '-%.0s' $(seq 1 $total_len))"

    # Data row: Cacti core
    printf " %${num_w}s ${GREEN}%-${name_w}s${RESET}| ${YELLOW}%-*s${RESET}| ${MAGENTA}%-*s${RESET}| ${GREEN}%-*s${RESET}| %-*s| %b\n" \
        "0." "$CACTI_NAME" $branch_w "$CACTI_BRANCH" $remote_w "$CACTI_REMOTE_HASH" $hash_w "$CACTI_LOCAL_HASH" $desc_w "$CACTI_LOCAL_DESC" "$CACTI_STATUS"

    printf "%s\n" "$(printf -- '-%.0s' $(seq 1 $total_len))"

    # Data rows: Plugins
    idx=1
    for PLUGIN in "${PLUGIN_LIST[@]}"; do
        PLUGIN_NAME=$(basename "$PLUGIN")
        BRANCH=$(sudo -u "$WEBUSER" git -C "$PLUGIN" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
        REMOTE_HASH="${plugin_remote_hash[$PLUGIN]}"
        LOCAL_HASH="${plugin_local_hash[$PLUGIN]}"
        LOCAL_DESC="${plugin_commit_desc[$PLUGIN]}"
        STATUS="${plugin_status[$PLUGIN]}"
        printf " %${num_w}s ${GREEN}%-${name_w}s${RESET}| ${YELLOW}%-*s${RESET}| ${MAGENTA}%-*s${RESET}| ${GREEN}%-*s${RESET}| %-*s| %b\n" \
            "$idx." "$PLUGIN_NAME" $branch_w "$BRANCH" $remote_w "$REMOTE_HASH" $hash_w "$LOCAL_HASH" $desc_w "$LOCAL_DESC" "$STATUS"
        ((idx++))
    done
    printf "%s\n" "$(printf -- '-%.0s' $(seq 1 $total_len))"

    # Only prompt if interactive
    if [ "$interactive" == "true" ]; then
        # NO prompt (per user request) -- just return to menu
        return
    fi
}

update_cacti() {
    echo -e "${CYAN}Navigating to Cacti base directory and pulling latest changes...${RESET}"
    pushd "$BASE_DIR" > /dev/null
    if ! sudo -u "$WEBUSER" git pull; then
        echo -e "${RED}Failed to pull in $BASE_DIR${RESET}"
        popd > /dev/null
        return 1
    fi
    popd > /dev/null
    echo -e "${YELLOW}-----------------------------${RESET}"
    pushd "$BASE_DIR" > /dev/null
    BRANCH=$(sudo -u "$WEBUSER" git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
    echo -e "${CYAN}Branch:${RESET} $BRANCH"
    echo -en "${CYAN}Latest commit:${RESET} "
    sudo -u "$WEBUSER" git log -n 1 --pretty=format:"%h - %an, %ar : %s" || echo -e "${RED}No commits found.${RESET}"
    echo
    popd > /dev/null
    echo -e "${GREEN}Cacti core update complete!${RESET}"
}

update_plugins_menu() {
    local plugins=()
    for PLUGIN in "$PLUGIN_DIR"/*/; do
        [ -d "$PLUGIN/.git" ] && plugins+=("$PLUGIN")
    done
    if [ "${#plugins[@]}" -eq 0 ]; then
        echo -e "${RED}No git plugins found in $PLUGIN_DIR.${RESET}"
        return
    fi

    echo -e "${CYAN}Available plugins:${RESET}"
    for i in "${!plugins[@]}"; do
        printf "${YELLOW}%2d.${RESET} %s\n" "$((i+1))" "$(basename "${plugins[$i]}")"
    done
    echo -e "${CYAN}A.${RESET} Update ALL plugins"
    echo -e "${CYAN}Q.${RESET} Return to main menu"
    echo -en "${YELLOW}Select plugin number, A for all, or Q to quit: ${RESET}"
    read -r choice

    if [[ "$choice" =~ ^[Qq]$ || -z "$choice" ]]; then
        return
    elif [[ "$choice" =~ ^[Aa]$ ]]; then
        for PLUGIN in "${plugins[@]}"; do
            update_single_plugin "$PLUGIN"
        done
    elif [[ "$choice" =~ ^[0-9]+$ && "$choice" -ge 1 && "$choice" -le "${#plugins[@]}" ]]; then
        update_single_plugin "${plugins[$((choice-1))]}"
    else
        echo -e "${RED}Invalid selection. Try again.${RESET}"
        update_plugins_menu
    fi
}

update_single_plugin() {
    local PLUGIN="$1"
    echo -e "${GREEN}Updating plugin:${RESET} $PLUGIN"
    pushd "$PLUGIN" > /dev/null
    if ! sudo -u "$WEBUSER" git pull; then
        echo -e "${RED}Failed to pull in $PLUGIN${RESET}"
    fi
    popd > /dev/null
    echo -e "${YELLOW}-----------------------------${RESET}"
}

change_branch_menu() {
    # Show versions with interactive prompt for branch changing
    view_plugins_and_branches true
    echo -en "${CYAN}Enter the number of a plugin/core to change its branch, or just Enter to return: ${RESET}"
    read -r pnum
    local PLUGIN_LIST=()
    for PLUGIN in "$PLUGIN_DIR"/*/; do
        [ -d "$PLUGIN/.git" ] && PLUGIN_LIST+=("$PLUGIN")
    done
    # Add core (cacti) as item 0
    if [[ "$pnum" =~ ^[Qq]$ || -z "$pnum" ]]; then
        return
    elif [[ "$pnum" =~ ^[0-9]+$ && "$pnum" -ge 0 && "$pnum" -le "${#PLUGIN_LIST[@]}" ]]; then
        if [ "$pnum" -eq 0 ]; then
            REPO="$BASE_DIR"
            REPO_NAME="cacti"
        else
            REPO="${PLUGIN_LIST[$((pnum-1))]}"
            REPO_NAME=$(basename "$REPO")
        fi
        REMOTE_BRANCHES=($(sudo -u "$WEBUSER" git -C "$REPO" branch -r 2>/dev/null | awk '/origin\// && $1 !~ /->/ { gsub(/^.*origin\//, "", $1); if (tolower($1) != "head") print $1 }' | sort -u))
        if [ "${#REMOTE_BRANCHES[@]}" -eq 0 ]; then
            echo -e "${RED}No remote branches found for this repo.${RESET}"
            echo -en "${YELLOW}Press Enter to return to menu...${RESET}"; read -r
            return
        fi
        echo -e "${CYAN}Remote branches for ${YELLOW}$REPO_NAME${CYAN}:${RESET}"
        for i in "${!REMOTE_BRANCHES[@]}"; do
            printf "${YELLOW}%2d.${RESET} %s\n" "$((i+1))" "${REMOTE_BRANCHES[$i]}"
        done
        echo -en "${CYAN}Enter branch name or number to switch to (or Q to quit): ${RESET}"
        read -r bsel
        [[ "$bsel" =~ ^[Qq]$ || -z "$bsel" ]] && return
        if [[ "$bsel" =~ ^[0-9]+$ && "$bsel" -ge 1 && "$bsel" -le "${#REMOTE_BRANCHES[@]}" ]]; then
            NEW_BRANCH="${REMOTE_BRANCHES[$((bsel-1))]}"
        else
            NEW_BRANCH="$bsel"
            MATCH=0
            for rbranch in "${REMOTE_BRANCHES[@]}"; do
                [ "$rbranch" == "$NEW_BRANCH" ] && MATCH=1
            done
            if [ $MATCH -eq 0 ]; then
                echo -e "${RED}Branch not found on remote.${RESET}"
                echo -en "${YELLOW}Press Enter to return to menu...${RESET}"; read -r
                return
            fi
        fi
        echo -e "${CYAN}Switching ${YELLOW}$REPO_NAME${CYAN} to branch ${YELLOW}$NEW_BRANCH${CYAN}...${RESET}"
        pushd "$REPO" > /dev/null
        sudo -u "$WEBUSER" git fetch
        if sudo -u "$WEBUSER" git checkout "$NEW_BRANCH" 2>/dev/null; then
            sudo -u "$WEBUSER" git pull
            echo -e "${GREEN}Now on branch: $NEW_BRANCH${RESET}"
        else
            if sudo -u "$WEBUSER" git checkout -b "$NEW_BRANCH" "origin/$NEW_BRANCH"; then
                sudo -u "$WEBUSER" git pull
                echo -e "${GREEN}Created and switched to tracking branch: $NEW_BRANCH${RESET}"
            else
                echo -e "${RED}Failed to switch to branch: $NEW_BRANCH${RESET}"
            fi
        fi
        popd > /dev/null
        echo -en "${YELLOW}Press Enter to return to menu...${RESET}"; read -r
    else
        echo -e "${RED}Invalid selection.${RESET}"
        echo -en "${YELLOW}Press Enter to return to menu...${RESET}"; read -r
    fi
}

upgrade_cacti_db() {
    echo -e "${CYAN}Running forced Cacti DB upgrade...${RESET}"
    sudo -u "$WEBUSER" php "$BASE_DIR/cli/upgrade_database.php" --forcever=1.2.29
    local status=$?
    if [ $status -eq 0 ]; then
        echo -e "${GREEN}Cacti database upgrade complete!${RESET}"
    else
        echo -e "${RED}Cacti database upgrade failed!${RESET}"
    fi
}

backup_cacti_db() {
    echo -en "${CYAN}Enter database name to backup: ${RESET}"
    read -r DB_NAME
    echo -en "${CYAN}Enter MySQL username: ${RESET}"
    read -r DB_USER
    echo -en "${CYAN}Enter MySQL host [localhost]: ${RESET}"
    read -r DB_HOST
    [ -z "$DB_HOST" ] && DB_HOST="localhost"
    BACKUP_FILE="${DB_BACKUP_DIR}/${DB_NAME}_backup_$(date +%F_%H%M%S).sql"
    echo -e "${CYAN}Backing up database to:${RESET} $BACKUP_FILE"
    mysqldump -h "$DB_HOST" -u "$DB_USER" -p "$DB_NAME" > "$BACKUP_FILE"
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Backup successful!${RESET}"
    else
        echo -e "${RED}Backup failed!${RESET}"
    fi
}

# ---- Main menu loop ----
view_plugins_and_branches false
while true; do
    echo
    echo -e "${CYAN}Cacti Updater Main Menu${RESET}"
    echo -e "${YELLOW}1.${RESET} View current Cacti/core and plugins"
    echo -e "${YELLOW}2.${RESET} Update Cacti (core repo only)"
    echo -e "${YELLOW}3.${RESET} Update Plugins (choose plugin, or all)"
    echo -e "${YELLOW}4.${RESET} Change branch for Cacti/core or plugin"
    echo -e "${YELLOW}5.${RESET} Force Cacti DB Upgrade"
    echo -e "${YELLOW}6.${RESET} Backup Cacti Database"
    echo -e "${YELLOW}Q.${RESET} Quit"
    echo -en "${CYAN}Select an option: ${RESET}"
    read -r menu_choice

    case "$menu_choice" in
        1)
            clear
            view_plugins_and_branches false
            ;;
        2)
            update_cacti
            ;;
        3)
            update_plugins_menu
            ;;
        4)
            change_branch_menu
            ;;
        5)
            upgrade_cacti_db
            ;;
        6)
            backup_cacti_db
            ;;
        [Qq])
            echo -e "${CYAN}Exiting.${RESET}"
            break
            ;;
        *)
            echo -e "${RED}Invalid selection. Try again.${RESET}"
            ;;
    esac
done

echo -e "${GREEN}All operations complete!${RESET}"
